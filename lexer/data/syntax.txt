附录：标准Pascal语言的文法定义
(摘自http://www.csci.csusb.edu/dick/samples/pascal.syntax.html)
一、元记号
1.	#(X)::= any number of X,
2.	O(X)::= empty|X,
二、词法定义
1.	<adding_operator>::= "+" | "-" | "or",
2.	<apostrophe_image>::= "'""'",
3.	<array>::="array",
4.	<begin>::="begin",
5.	<caret>::="^",
6.	<case>::="case",
7.	<character_string>::= "'" <string_element> #(<string_element>) "'",
8.	<colon>::=":",
9.	<colon_equals>::=":=",
10.	<comma>::=",",
11.	<const>::="const",
12.	<digit>::= ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "0"),
13.	<digit_sequence>::= <digit> #(<digit>),
14.	<do>::="do",
15.	<dot>::=".",
16.	<doubledot>::="..",
17.	<downto>::="downto",
18.	<else>::="else",
19.	<end>::="end",
20.	<equals>::="=",
21.	<for>::="for",
22.	<fractional_part>::= <digit_sequence>,
23.	<function>::="function",
24.	<goto>::="goto",
25.	<identifier>::= <letter> #( <letter> | <digit>),
26.	<if>::="if",
27.	<label>::="label",
28.	<left>::="(",
29.	<left_br>::="[",
30.	<letter>::= ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"),
31.	<multiplying_operator>::= "*" | "/" | "div" | "mod" | "and",
32.	<nil>::="nil",
33.	<not>::="not",
34.	<of>::="of",
35.	<packed>::="packed",
36.	<procedure>::="procedure",
37.	<program>::="program",
38.	<record>::="record",
39.	<relational_operator>::= "=" | "<>" | "<" | ">" | "<=" | ">=" | "in",
40.	<repeat>::="repeat",
41.	<right>::=")",
42.	<right_br>::="]",
43.	<scale_factor>::= <signed_integer>,
44.	<semicolon>::=";",
45.	<file>::="file",
46.	<set>::="set",
47.	<sign>::= "+" | "-",
48.	<signed_integer>::= O(<sign>) <unsigned_integer>,
49.	<signed_real>::= O(<sign>) <unsigned_real>,
50.	<string_character>::= <one_of_a_set_of_implementation_defined_characters>,
51.	<string_element>::= <apostrophe_image> | <string_character>,
52.	<then>::="then",
53.	<to>::="to",
54.	<type >::="type",
55.	<unsigned_integer>::= <digit_sequence>,
56.	<unsigned_real>::= <unsigned_integer> "." <fractional_part> #("e" <scale_factor>) | <unsigned_integer> "e" <scale_factor>,
57.	<until>::="until",
58.	<var>::="var",
59.	<while>::="while",
60.	<with>::="with".
三、语法定义
(一)程序和块
1.	<program>::= <program_heading> “;” <program_block>,
2.	<program_heading>::="program" <identifier> ("(" O( <program_parameters>) ")"),
3.	<program_block>::= <block> ".",
4.	<block>::= <label_declarations> <constant_definitions> <type_definitions> <variable_declarations> <procedure_function_declarations> <statement_part>,
5.	<program_parameters>::= <identifier_list>,
(二)声明和类型定义
6.	<label_declarations>::= O("label" <label_list> “;” ),
7.	<label>::= <digit_sequence>,
8.	<label_list>::=<label_list>“,”<label>|<label>,
9.	<constant_definitions>::= O("const" <constant_definition_sequence> “;”),
10.	<constant_definition>::= <identifier> "=" <constant>,
11.	<constant_definition_sequence>::=<constant_definition_sequence>“;” <constant_definition>|<constant_definition>,
12.	<type_definitions>::= O("type" <type_definition> “;” #(<type_definition> “;”) ),
13.	<type_definition>::= <identifier> "=" <type_denoter>,
14.	<variable_declarations>::= O("var" <variable_declaration> “;” #(<variable_declaration> “;”) ),
15.	<variable_declaration>::= <identifier_list> ":" <type_denoter>,
16.	<procedure_function_declarations>::= #( <procedure_declaration> | <function_declaration> ) “;”,
17.	<identifier_list>::=<identifier_list>“,”<identifier>|<identifier>,
(三)子程序声明
18.	<subprogram_declaration>::= <procedure_declaration> | <function_declaration>,
(四)过程声明
19.	<procedure_declaration>::= <procedure_heading> “;” <directive> | <procedure_identification> “;” <procedure_block> | <procedure_heading> “;” <procedure_block>,
20.	<procedure_heading>::= "procedure" <identifier> O(<formal_parameter_list>),
21.	<procedure_identification>::= "procedure" <procedure_identifier>,
22.	<procedure_block>::= <block>,
23.	<procedure_identifier>::= <identifier>,
24.	<directive>::= <letter> #(<letter> | <digit>),
25.	<type_denoter>::= <type_identifier> | <new_type>,
(五)函数声明
26.	<function_declaration>::= <function_heading> “;” <directive> | <function_identification> “;” <function_block> | <function_heading> “;” <function_block>,
27.	<function_heading>::= "function" <identifier> (<formal_parameter_list> ) ":" <result_type>,
28.	<function_block>::= <block>,
(六)形参和自变量
29.	<formal_parameter_list>::= <formal_parameter_section> #( “;” <formal_parameter_section>),
30.	<formal_parameter_section>::= <value_parameter_specification> | <variable_parameter_specification> | <procedural_parameter_specification> | <functional_parameter_specification> | <conformant_array_parameter_specification>,
31.	<value_parameter_specification>::= <identifier_list> ":" <type_identifier>,
32.	<variable_parameter_specification>::= "var" <identifier_list> ":" <type_identifier>,
33.	<procedural_parameter_specification>::= <procedure_heading>,
34.	<functional_parameter_specification>::= <function_heading>,
35.	<conformant_array_parameter_specification>::= <value_conformant_array_specification> | <variable_conformant_array_specification>,
36.	<value_conformant_array_specification>::= <identifier_list> ":" <conformant_array_schema>,
37.	<variable_conformant_array_specification>::= "var" <identifier_list> ":" <conformant_array_schema>,
38.	<conformant_array_schema>::= <packed_conformant_array_schema> | <unpacked_conformant_array_schema>,
39.	<packed_conformant_array_schema>::= "packed" "array" O(<index_type_specification> ) "of" <type_identifier>,
40.	<unpacked_conformant_array_schema>::= "array" O(<index_type_specification> #(“;” <index_type_specification>) ) "of" <type_identifier> | <conformant_array_schema>,
41.	<index_type_specfication>::= <identifier> ".." <identifier> ":" <ordinal_type_identifier>,
(七)常量
42.	<constant>::= <signed_number> | <constant_identifier> | <character_string>,
43.	<unsigned_constant>::= <unsigned_number>|<character_string>|<constant_identifier>|"nil",
44.	<signed_number>::= <signed_integer> | <signed_real>,
45.	<unsigned_number>::= <unsigned_integer> | <unsigned_real>,
46.	<constant_identifier>::= <identifier>,
(八)类型
47.	<type_identifier>::= <identifier>,
48.	<new_type>::= <new_ordinal_type> | <new_structured_type> | <new_pointer_type>,
49.	<result_type>::= <simple_type_identifier> | <pointer_type_identifier>,
50.	<new_ordinal_type>::= <enumerated_type> | <subrange_type>,
51.	<new_structured_type>::= O("packed") <unpacked_structured_type>,
52.	<new_pointer_type>::= "^" <domain_type>,
53.	<simple_type_identifier>::= <type_identifier>,
54.	<pointer_type_identifier>::= <type_identifier>,
55.	<enumerated_type>::= <identifier_list>,
56.	<subrange_type>::= <constant> ".." <constant>,
57.	<unpacked_structured_type>::= <array_type> | <record_type> | <set_type> | <file_type>,
58.	<domain_type>::= <type_identifier>,
59.	<array_type>::= "array" #(<index_type> #("," <index_type>) ) "of" <component_type>,
60.	<set_type>::= "set of" <base_type>,
61.	<file_type>::= "file of" <component_type>,
62.	<index_type>::= <ordinal_type>,
63.	<component_type>::= <type_denoter>,
64.	<base_type>::= <ordinal_type>,
65.	<ordinal_type>::= <new_ordinal_type> | <ordinal_type_identifier>,
66.	<ordinal_type_identifier>::= <type_identifier>,
67.	<record_type>::= "record" <field_list> "end",
68.	<record_section>::= <identifier_list> ":" <type_denoter>,
69.	<field_list>::= O(<fixed_part> #( “;” <variant_part> ) ,
70.	<fixed_part>::= <record_section> #( “;” <record_section>),
71.	<variant_part>::= "case" <variant_selector> "of" <variant> #( “;” <variant>),
72.	<variant_selector>::= O(<tag_field> ":" ) <tag_type>,
73.	<variant>::= <case_constant_list> ":" <field_list>,
74.	<tag_field>::= <identifier>,
75.	<tag_type>::= <ordinal_type_identifier>,
76.	<case_constant_list>::= <case_constant> #( "," <case_constant>),
77.	<case_constant>::= <constant>,
(九)语句
78.	<procedure_statement>::= <procedure_identifier> O(<actual_parameter_list> ) | <io_procedure_statement>,
79.	<io_procedure_statement>::= "read" <read_parameter_list> | "readln" <readln_parameter_list> | "write" <write_parameter_list> | "writeln" <writeln_parameter_list>,
80.	<actual_parameter_list>::= <actual_parameter> #( "," <actual_parameter>),
81.	<optional_file>::=O(<file_variable> ","),
82.	<read_parameter_list>::= <optional_file> <variable_access> #( "," <variable_access>),
83.	<readln_parameter_list>::= O(<optional_file> <variable_access> #( "," <variable_access>) ),
84.	<write_parameter_list>::= <optional_file> <write_parameter> #( "," <write_parameter>),
85.	<writeln_parameter_list>::= O(<optional_file> <write_parameter> #( "," <write_parameter>) ),
86.	<actual_parameter>::= <expression> | <variable_access> | <procedure_identifier> | <function_identifier>,
87.	<file_variable>::= <variable_access>,
88.	<variable_access>::= <entire_variable> | <component_variable> | <identified_variable> | <buffer_varible>,
89.	<write_parameter>::= <expression> O( ":" O(":"<expression> ) ),
90.	<statement_part>::= <compound_statement>,
91.	<compound_statement>::= "begin" <statement_sequence> "end",
92.	<statement_sequence>::= <statement> #(“;” <statement>),
93.	<statement>::= O(<label> ":" ) (<simple_statement> | <structured_statement>),
94.	<simple_statement>::= <empty_statement> | <assignment_statement> | <procedure_statement> | <goto_statement>,
95.	<structured_statement>::= <compound_statement> | <conditional_statement> | <repetitive_statement> | <with_statement>,
96.	<empty_statement>::=,
97.	<assignment_statement>::= <variable_access> | <function_identifier> ":=" <expression>,
98.	<goto_statement>::= "goto" <label>,
99.	<conditional_statement>::= <if_statement> | <case_statement>,
100.	<repetitive_statement>::= <repeat_statement> | <while_statement> | <for_statement>,
101.	<loop>::= <repeat_statement> | <while_statement> | <for_statement>,
102.	<with_statement>::= "with" <record_variable_list> "do" <statement>,
103.	<if_statement>::= "if" <boolean_expression> "then" <statement> O(<else_part> ),
104.	<case_statement>::= "case" <case_index> "of" <case_list_element> #(“;” <case_list_element>) O(“;”) "end",
105.	<repeat_statement>::= "repeat" <statement_sequence> "until" <boolean_expression>,
106.	<while_statement>::= "while" <boolean_expression> "do" <statement>,
107.	<for_statement>::= "for" <control_variable> ":=" <initial_value> ("to" | "downto") <final_value> "do" <statement>,
108.	<record_variable_list>::= <record_variable> #("," <record_variable>),
109.	<boolean_expression>::= <expression>,
110.	<else_part>::= "else" <statement>,
111.	<case_index>::= <expression>,
112.	<case_list_element>::= <case_constant_list> ":" <statement>,
113.	<control_variable>::= <entire_variable>,
114.	<initial_value>::= <expression>,
115.	<final_value>::= <expression>,
(十)表达式和变量
116.	<expression>::=<simple_expression>#(<relational_operator><simple_expression>),
117.	<function_identifier>::= <identifier>,
118.	<entire_variable>::= <variable_identifier>,
119.	<component_variable>::= <indexed_variable> | <field_designator>,
120.	<identified_variable>::= <pointer_variable> "^",
121.	<buffer_variable>::= <file_variable> "^",
122.	<simple_expression>::= O(<sign>) <term> #(<adding_operator> <term>),
123.	<variable_identifier>::= <identifier>,
124.	<indexed_variable>::= <array_variable> "[" O(<index_expression> #("," <index_expression>) ) "]" ,
125.	<field_designator>::= <record_variable> "." <field_specifier> | <field_designator_identifier>,
126.	<pointer_variable>::= <variable_access>,
127.	<term>::= <factor> #(<multiplying_operator> <factor>),
128.	<array_variable>::= <variable_access>,
129.	<index_expression>::= <expression>,
130.	<record_variable>::= <variable_access>,
131.	<field_specifier>::= <field_identifier>,
132.	<field_designator_identifier>::= <identifier>,
133.	<factor>::= <variable_access> | <unsigned_constant> | <function_designator> | <set_constructor> | <expression> | "not" <factor>, | <bound_identifier>,
134.	<field_identifier>::= <identifier>,
135.	<set_constructor>::= O( #(<member_designator> #("," <member_designator>))),
136.	<bound_identifier>::= <identifier>,
137.	<member_designator>::= <expression> #(".." <expression>),
138.	<function_identification>::= "function" <function_identifier>,
139.	<function_designator>::= <function_identifier> O(<actual_parameter_list>).
