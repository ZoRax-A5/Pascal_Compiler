KEYWORD_ABSOLUTE absolute
KEYWORD_AND and
KEYWORD_ARRAY array
KEYWORD_ASM asm
KEYWORD_BEGIN begin
KEYWORD_BREAK break
KEYWORD_CASE case
KEYWORD_CONST const
KEYWORD_CONSTRUCTOR constructor
KEYWORD_CONTINUE continue
KEYWORD_DESTRUCTOR destructor
KEYWORD_DIV div
KEYWORD_DO do
KEYWORD_DOWNTO downto
KEYWORD_ELSE else
KEYWORD_END end
KEYWORD_FILE file
KEYWORD_FOR for
KEYWORD_FUNCTION function
KEYWORD_GOTO goto
KEYWORD_IF if
KEYWORD_IMPLEMENTATION implementation
KEYWORD_IN in
KEYWORD_INHERITED inherited
KEYWORD_INLINE inline
KEYWORD_INTERFACE interface
KEYWORD_LABEL label
KEYWORD_MOD mod
KEYWORD_NIL nil
KEYWORD_NOT not
KEYWORD_OBJECT object
KEYWORD_OF of
KEYWORD_ON on
KEYWORD_OPERATOR operator
KEYWORD_OR or
KEYWORD_PACKED packed
KEYWORD_PROCEDURE procedure
KEYWORD_PROGRAM program
KEYWORD_RECORD record
KEYWORD_REINTRODUCE reintroduce
KEYWORD_REPEAT repeat
KEYWORD_SELF self
KEYWORD_SET set
KEYWORD_SHL shl
KEYWORD_SHR shr
KEYWORD_STRING string
KEYWORD_THEN then
KEYWORD_TO to
KEYWORD_TYPE type
KEYWORD_UNIT unit
KEYWORD_UNTIL until
KEYWORD_USES uses
KEYWORD_VAR var
KEYWORD_WHILE while
KEYWORD_WITH with
KEYWORD_XOR xor
TYPE_INTEGER integer
TYPE_REAL real
TYPE_CHAR char
TYPE_BOOLEAN boolean
LITERAL_INTEGER [0-9]+
LITERAL_REAL ([0-9]+\.[0-9]+)
LITERAL_CHAR \'.\'
LITERAL_BOOLEAN_TRUE true
LITERAL_BOOLEAN_FALSE false
SYMBLE_ADD "+"
SYMBLE_SUB "-
SYMBLE_MUL "*"
SYMBLE_DIV "/"
SYMBLE_ASSIGN ":="
SYMBLE_GT ">"
SYMBLE_LT "<"
SYMBLE_GE ">="
SYMBLE_LE "<="
SYMBLE_EQUAL "="
SYMBLE_NEQUAL "<>"
SYMBLE_CARET "^"
SYMBLE_AT "@"
SYMBLE_DOT "."
SYMBLE_COMMA ","
SYMBLE_SEMICOLON ";"
SYMBLE_COLON ":"
SYMBLE_LPAREN "("
SYMBLE_RPAREN ")"
SYMBLE_LBRACK "["
SYMBLE_RBRACK "]"
IDENTIFIER [a-zA-Z][a-zA-Z0-9]*
COMMENT "{"[^\}]*"}"